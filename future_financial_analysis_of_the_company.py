# -*- coding: utf-8 -*-
"""Future Financial analysis of the company.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HNdOoYe9a-o1A6KUCGrA3br8EkYRZG6O
"""

import numpy as np
import pandas as pd
eps = np.finfo(float).eps
from numpy import log2 as log

df=pd.read_csv('/content/Financial Statements.csv')

df.head(20)

df.columns

df.isnull().sum()

#count of unique values
df.nunique()

df['Market Cap(in B USD)'].fillna(0,inplace=True)

df.loc[51]

df['Category']=df['Category'].str.upper()

#show the null values in my data
df[df['Revenue']==8025.0]

df.tail(5)

df['Category'].unique()

df.describe()

df['Market Cap(in B USD)']=df['Market Cap(in B USD)'].fillna(0)

#Capital letters for uniformity
df['Category']=df['Category'].str.upper()

import matplotlib.pyplot as plt  # Importing matplotlib

numerical_columns = ['Market Cap(in B USD)', 'Revenue', 'Gross Profit', 'Net Income']
df[numerical_columns].hist(bins=20, figsize=(15, 10))
plt.suptitle('Distribution of Numerical Variables')  # Matplotlib functions are preceded by plt.
plt.show()

company_cap = df[df['Year'] == 2022].groupby('Company ')['Market Cap(in B USD)'].sum().reset_index()
company_capi=company_cap.sort_values(by='Market Cap(in B USD)', ascending=False)
plt.bar(company_capi['Company '], company_capi['Market Cap(in B USD)'])
for i, value in enumerate(company_capi['Market Cap(in B USD)']):
     plt.text(i, value + 0.4, str(value), ha='center', va='bottom')
plt.title('the bigest company on 2022')
plt.xlabel('the company')
plt.ylabel('the capital in B USD')

category_cap=df[df['Year']==2022].groupby('Category')['Market Cap(in B USD)'].sum().reset_index()
category_capi=category_cap.sort_values(by='Market Cap(in B USD)', ascending=False)
plt.pie(category_capi['Market Cap(in B USD)'], labels=category_capi['Category'], autopct='%1.2f%%')
plt.title('the biggest category')

import matplotlib.pyplot as plt  # Importing matplotlib
import seaborn as sns  # Importing seaborn

numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns
numeric_df = df[numeric_columns]
correlation_matrix = numeric_df.corr()
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

df.columns

numerical_columns = ['Market Cap(in B USD)', 'Revenue',
       'Gross Profit', 'Net Income', 'Earning Per Share', 'EBITDA',
       'Share Holder Equity', 'Cash Flow from Operating',
       'Cash Flow from Investing', 'Cash Flow from Financial Activities',
       'Current Ratio', 'Debt/Equity Ratio', 'ROE', 'ROA', 'ROI',
       'Net Profit Margin', 'Free Cash Flow per Share',
       'Return on Tangible Equity', 'Number of Employees',
       'Inflation Rate(in US)']
for column in numerical_columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[column])
    plt.title(f'Boxplot of {column}')
    plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(df['Number of Employees'], bins=20)
plt.title('Distribution of Number of Employees')
plt.show()

plt.bar(df['Category'], df['Number of Employees'])
plt.xlabel('Categories')
plt.ylabel('Number of Employees')
plt.title('Number of Employees in Each Category')
plt.xticks(rotation=45, ha='right')


plt.show()

# Create a box plot
plt.figure(figsize=(12, 8))
sns.barplot(x='Category', y='Revenue', data=df, palette='viridis')
plt.title('Distribution of Revenue Across Categories')
plt.xlabel('Category')
plt.ylabel('Revenue')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.show()

prof_company=df[df['Year']==2022].groupby('Company ')['Net Income'].sum().reset_index()
proft_company=prof_company.sort_values(by='Net Income', ascending=False)
plt.bar(proft_company['Company '], proft_company['Net Income'])
for i, value in enumerate(proft_company['Net Income']):
     plt.text(i, value + 0.4, str(value), ha='center', va='bottom')
plt.title('the revenue of company on 2022')
plt.xlabel('the company')
plt.ylabel('revenue in M USD')

df.columns

# Create a box plot
plt.figure(figsize=(12, 8))
sns.barplot(x='Category', y='Gross Profit', data=df, palette='viridis')
plt.title('Distribution of Gross Profitevenue Across Categories')
plt.xlabel('Category')
plt.ylabel('Gross Profit')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.show()

import plotly.express as px

px.line(df, x='Year', y='Net Income', color='Company ', title='evolution of income by year')

px.line(df, x='Year', y='Earning Per Share', color='Company ', title='evolution of share per year')

px.line(df, x='Year', y='ROE', color='Company ', title='Return on Equity by year')

px.line(df, x='Year', y='ROA', color='Company ', title='Return on asset by year')

px.line(df, x='Year', y='ROI', color='Company ', title='Return on investment by year')

emp_cat=df.groupby(['Category','Year'])['Number of Employees'].sum().reset_index()
px.line(emp_cat, x='Year', y='Number of Employees', color='Category',title='evolution of employees by year on each category')

infl=df.groupby('Year')['Inflation Rate(in US)'].mean().reset_index()
px.line(infl, x='Year', y='Inflation Rate(in US)', title='inflation by year')

pip install pycaret[full]

df.columns

!pip install pycaret

from pycaret.regression import *
s = setup(df, target='Gross Profit', session_id=123)

import pandas as pd
from sklearn.linear_model import LinearRegression

# Assuming df contains your DataFrame with historical data
# X should be the feature(s) used for prediction (e.g., Revenue)
X = df[['Revenue']]
y = df['Net Income']

# Initialize and train a linear regression model
model = LinearRegression()
model.fit(X, y)

# Predicted net income for each row
predicted_net_income = model.predict(X)

# Create a new DataFrame including the predicted net income
predicted_df = df.copy()
predicted_df['Predicted Net Income'] = predicted_net_income

# Display the DataFrame as a table
print(predicted_df.head(20))

import pandas as pd

# Assuming df contains your DataFrame with historical data

# Define the base case inflation rate
base_inflation_rate = df['Inflation Rate(in US)'].iloc[-1]

# Define the scenarios for inflation
inflation_scenarios = {
    'Base Case': base_inflation_rate,
    'Optimistic': base_inflation_rate * 0.8,  # 80% of the base rate
    'Pessimistic': base_inflation_rate * 1.2  # 120% of the base rate
}

# Create an empty DataFrame to store the results
results_df = pd.DataFrame(columns=['Scenario', 'Predicted Net Income', 'Predicted Gross Profit'])

# Perform scenario analysis
for scenario, inflation_rate in inflation_scenarios.items():
    # Calculate the predicted net income and gross profit for each scenario
    predicted_net_income = df['Net Income'] * (1 + inflation_rate)
    predicted_gross_profit = df['Gross Profit'] * (1 + inflation_rate)

    # Add the results to the DataFrame
    results_df = pd.concat([results_df, pd.DataFrame({
        'Scenario': [scenario] * len(df),
        'Predicted Net Income': predicted_net_income,
        'Predicted Gross Profit': predicted_gross_profit
    })], ignore_index=True)

# Display the results DataFrame as tables for each scenario
for scenario, scenario_df in results_df.groupby('Scenario'):
    print(f"\n{scenario} Scenario:")
    print(scenario_df.head(20).to_string(index=False))